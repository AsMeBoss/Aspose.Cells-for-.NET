<?xml version="1.0" encoding="utf-8"?>
<Data>
  <Folders>
    <Folder>
      <Title>Programmers Guide</Title>
      <Description>Programmers Guide provides code samples about key programming concepts to build .NET and other applications that use Aspose.Cells for .NET</Description>
      <FolderName>ProgrammersGuide</FolderName>
      <Order>1</Order>
      <Folders>
        <Folder>
          <Title>Aspose.Cells</Title>
          <Description>This section includes examples related to the following topics: 

- Introduction of Aspose.Cells for .NET
- Working with Files
- Working with Worksheets
- Working with Rows and Columns
- Working with Data
- Working with Data Formatting
- Working with Tables
- Working with Formulas
- Creating Charts
- Working with Other Drawing Objects
- Working with Pivot Tables
- Working with CellsHelper Methods
- Advanced Topics
- Utilize Aspose.Cells in other Programming Languages</Description>
          <FolderName>AsposeCells</FolderName>
          <Order>1</Order>
          <Folders>
            <Folder>
              <Title>Working With Files</Title>
              <Description>Contains examples for file handling and utility features.</Description>
              <FolderName>WorkingWithFiles</FolderName>
              <Order>1</Order>
              <Folders>
                <Folder>
                  <Title>Utility Features</Title>
                  <Description>Includes Examples for Rendering/Conversion to other formats, Managing Document Properties and Encryption of Documents etc.</Description>
                  <FolderName>UtilityFeatures</FolderName>
                  <Order>1</Order>
                  <Examples>
                    <Example>
                      <Title>Excel to PDF Conversion</Title>
                      <Description>Aspose.Cells for .NET supports conversion from spreadsheets to PDF independently of other software. Save an Excel file to PDF using the Workbook class' Save method. The Save method provides the SaveFormat.Pdf enum member that converts the native Excel files to PDF format.</Description>
                      <FolderName>Excel2PDFConversion</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Converting to PDF Files</DisplayName>
                        <Url>Converting+to+PDF+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\outBook1.pdf</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Chart To Image</Title>
                      <Description>Example to convert charts in Excel files to images. This helps to present data in an easy to read and easy to maintain way for users.</Description>
                      <FolderName>ChartToImage</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Converting Chart to Image</DisplayName>
                        <Url>Converting+Chart+to+Image</Url>
                      </DocLink>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Chart.emf</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Worksheet to Image</Title>
                      <Description>Aspose.Cells supports converting Excel worksheets to images. To use this feature, you need to import the Aspose.Cells.Rendering namespace to your program or  and use ToImage method, that can convert a worksheet to image file(s) with different attributes or options.</Description>
                      <FolderName>WorksheetToImage</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Converting Worksheet to Image</DisplayName>
                        <Url>Converting+Worksheet+to+Image</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\MyTestBook1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\SheetImage.jpg</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Converting to XPS</Title>
                      <Description>The XPS document format consists of structured XML markup that defines the layout of a document and the visual appearance of each page, along with rendering rules for distributing, archiving, rendering, processing and printing the documents. Notably, the markup language for XPS is a subset of XAML, allowing it to incorporate vector-graphic elements in documents, using XAML to mark up the Windows Presentation Foundation (WPF) primitives. The elements used are described in terms of paths and other geometrical primitives.
An XPS file is in fact a Unicoded ZIP archive using the Open Packaging Conventions, containing the files which make up the document. These include an XML markup file for each page, text, embedded fonts, raster images, 2D vector graphics, as well as the digital rights management information. The contents of an XPS file can be examined simply by opening it in an application which supports ZIP files.

You might require to convert Excel files to XPS files. Since the release of v6.0.0, Aspose.Cells supports Excel-to-XPS feature.</Description>
                      <FolderName>ConvertingToXPS</FolderName>
                      <Order>4</Order>
                      <DocLink>
                        <DisplayName>Converting to XPS</DisplayName>
                        <Url>Converting+to+XPS</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\out_printingxps.xps</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\out_whole_printingxps.xps</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Managing Document Properties</Title>
                      <Description>Microsoft Excel provides a feature to add some properties to the Excel files. These document properties allow some useful information to be stored along with the documents (Excel files). There are two kinds of document properties as follows:

- System Defined (Built-in) Properties
- User Defined (Custom) Properties

Built-in properties contain general information about the document like document title, author's name, document statistics and so on. Custom properties are those ones, which are defined by the users as Name/Value pairs, where both name and value are defined by the user. The most important point to know about the built-in and custom properties is that built-in properties can be accessed and modified only but not created or removed because these properties are system defined. However, custom properties can be created and managed freely by the developers because these properties are defined by the users.</Description>
                      <FolderName>ManagingDocumentProperties</FolderName>
                      <Order>5</Order>
                      <DocLink>
                        <DisplayName>Managing Document Properties</DisplayName>
                        <Url>Managing+Document+Properties</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Test_Workbook.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Test_Workbook_RemovedProperty.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Encrypting Files</Title>
                      <Description>Microsoft Excel (97 - 2007) enables you to encrypt / password protect your spreadsheets. It utilizes algorithms provided by Crypto Service Provider. A Crypto Service Provider or CSP is a set of cryptographic algorithms with different properties. The default CSP is "Office 97/2000 Compatible" or "Week Encryption (XOR)". It's also important to choose a proper encryption key length. Some of the Crypto Service Providers don't support more than 40 or 56 bits. That's considered to be a weak encryption type. But, for strong encryption type, a minimum key length of 128 bits is required. Microsoft Windows contains Crypto Service Providers that offer strong encryption types as well, for example the 'Microsoft Strong Cryptographic Provider'. To give an idea, 128 bits encryption is what banks use to encrypt the connection with their Internet Banking systems. Aspose.Cells allows you to encrypt / password protect your excel files with your desired encryption type.

This example shows how you can encrypt / password protect an excel file using the Aspose.Cells API.</Description>
                      <FolderName>EncryptingFiles</FolderName>
                      <Order>6</Order>
                      <DocLink>
                        <DisplayName>Encrypting Files</DisplayName>
                        <Url>Encrypting+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\encryptedBook1.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Converting Worksheet to SVG</Title>
                      <Description>SVG stands for Scalable Vector Graphics. SVG is a specification based on XML standards for two-dimensional vector graphics. It is an open standard that has been under development by the World Wide Web Consortium (W3C) since 1999.
Since the release of v7.1.0, Aspose.Cells can convert worksheets into SVG images.

To use this feature, you need to import the Aspose.Cells.Rendering namespace to your program or project. It has several valuable classes for rendering and printing, for example SheetRender, ImageOrPrintOptions, WorkbookRender and others. 

The Aspose.Cells.Rendering.ImageOrPrintOptions class specifies that the worksheet will be saved in SVG format.

The Aspose.Cells.Rendering.SheetRender class takes the object of ImageOrPrintOptions as a parameter. It has an overloaded method, ToImage, that converts a worksheet to SVG format.</Description>
                      <FolderName>ConvertingWorksheetToSVG</FolderName>
                      <Order>7</Order>
                      <DocLink>
                        <DisplayName>Converting Worksheet to SVG</DisplayName>
                        <Url>Converting+Worksheet+to+SVG</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Template.xlsx</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Template.xlsxSheet10.out.svg</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Template.xlsxSheet20.out.svg</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Converting to MHTML Files</Title>
                      <Description>MHTML combines normal HTML with external resources (that is, content that is usually linked in like images, animations, audio and so on) into one file. They are used for emails with the .mht file extension.
Aspose.Cells supports reading and writing MHTML files.</Description>
                      <FolderName>ConvertingToMHTMLFiles</FolderName>
                      <Order>8</Order>
                      <DocLink>
                        <DisplayName>Converting to MHTML Files</DisplayName>
                        <Url>http://www.aspose.com/docs/display/cellsjava/Converting+to+MHTML+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xlsx</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xlsx.out.mht</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
                <Folder>
                  <Title>File Handling Features</Title>
                  <Description>This section includes examples related to following topics: 

- Opening Files
- Saving Files
- Save Entire Workbook into Text or CSV Format</Description>
                  <FolderName>FileHandlingFeatures</FolderName>
                  <Order>2</Order>
                  <Examples>
                    <Example>
                      <Title>Opening Files</Title>
                      <Description>Developers can make use of Aspose.Cells to open existing files for different purposes. For example, you can open an existing file to retrieve data from it or you can use a pre-defined Designer Spreadsheet file to speed up your development process etc. Aspose.Cells allows developers to open different kinds of source files. These source files can be Excel reports (XLS, XLSX, XLSM, XLSB etc.), SpreadsheetML, CSV or Tab Delimited files. In this example, we will show how opening of these different kinds of source files is performed using Aspose.Cells.</Description>
                      <FolderName>OpeningFiles</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Opening Files</DisplayName>
                        <Url>Opening+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xlsx</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book_Excel2007.xlsx</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book2.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book_Excel97_2003.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book3.xml</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book_CSV.csv</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book1TabDelimited.txt</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\encryptedBook.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Save Entire Workbook into Text or CSV Format</Title>
                      <Description>Sometimes, you want to convert/save the entire workbook with multiple worksheets into text format. For text formats (e.g Txt, Tab Delimited, CSV etc), by default both Ms-Excel and Aspose.Cells save the contents of active worksheet only.</Description>
                      <FolderName>SaveWorkbookToTextCSVFormat</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Save Entire Workbook into Text or CSV Format</DisplayName>
                        <Url>Save+Entire+Workbook+into+Text+or+CSV+Format</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\out.txt</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
              </Folders>
            </Folder>
            <Folder>
              <Title>Working with Worksheets</Title>
              <Description>This section includes examples related to the following topics: 

- Management Features
- Display Features
- Security Features
- Page Setup Features
- Value Features</Description>
              <FolderName>WorkingWithWorksheets</FolderName>
              <Order>2</Order>
              <Folders>
                <Folder>
                  <Title>Display Features</Title>
                  <Description>This Section includes examples related to following topics: 

- Hide or Unhide a Worksheet
- Display or Hide Tabs
- Display or Hide Scroll Bars
- Display or Hide Gridlines
- Display or Hide Row Column Headers
- Page Break Preview
- Zoom Factor
- Freeze Panes
- Split Panes</Description>
                  <FolderName>DisplayFeatures</FolderName>
                  <Order>1</Order>
                  <Examples>
                    <Example>
                      <Title>Hide or Unhide a Worksheet</Title>
                      <Description>An Excel file can have one or more than one worksheets. Whenever we create an Excel file, we add worksheets to the Excel file in which we work. Each worksheet in an Excel file is independent from the other worksheet by having its own data and formatting settings etc. Sometimes, developers may require to make few worksheets hidden and others visible in the Excel file for their own interest. So, Aspose.Cells allows developers to control the visibility of the worksheets in their Excel files.

Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a Worksheets collection that allows to access each worksheet in the Excel file.

A worksheet is represented by the Worksheet class. Worksheet class provides a wide range of properties and methods to manage a worksheet. But, to control the visibility of a worksheet, developers may use IsVisible property of the Worksheet class. IsVisible is a boolean property, which means that it can only store a true or false value. This example elaborates the use of this property according to his/her requirements.</Description>
                      <FolderName>HideUnhideWorksheet</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Hide or Unhide a Worksheet</DisplayName>
                        <Url>Hide+or+Unhide+a+Worksheet</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Tabs</Title>
                      <Description>Sheet Tabs are the tabs that represent all worksheets in the Excel file. You can click on any desired tab to switch to a particular worksheet. The more worksheets you have, the more sheet tabs will be created. If your Excel file has a good number of worksheets then you would also need some buttons to navigate through all of these sheet tabs.

Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class provides a wide range of properties and methods to manage an Excel file. But, to control the visibility of the tabs in the Excel file, developers may use ShowTabs property of the Workbook class. ShowTabs is a boolean property, which means that it can only store a true or false value. Developers can hide the tabs of the Excel file by setting the ShowTabs property of the Workbook class to false. In this example this is explained in detail.</Description>
                      <FolderName>DisplayHideTabs</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Tabs</DisplayName>
                        <Url>Display+or+Hide+Tabs</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Scroll Bars</Title>
                      <Description>Microsoft Excel also provides Horizontal &amp; Vertical Scroll Bars to scroll through the contents of the worksheets. Using Aspose.Cells, developers can control the visibility of both of these scroll bars in their Excel files. Developers can hide the vertical or horizontal scroll bars of the Excel file by setting the IsVScrollBarVisible or IsHScrollBarVisible property of the Workbook class to false. This example describes the use of this property in detail.</Description>
                      <FolderName>DisplayHideScrollBars</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Scroll Bars</DisplayName>
                        <Url>Display+or+Hide+Scroll+Bars</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Gridlines</Title>
                      <Description>All Excel worksheets have Gridlines by default, which helps us in entering data to particular cells of a worksheet. Gridlines enable us to view a worksheet as a collection of cells, where each cell is easily identifiable. Using, Aspose.Cells , developers can also control the visibility of the gridlines in their worksheets.

Developers can hide gridlines by setting the IsGridlinesVisible property of the Worksheet class to false. In this example this is explained in detail.</Description>
                      <FolderName>DisplayHideGridlines</FolderName>
                      <Order>4</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Gridlines</DisplayName>
                        <Url>Display+or+Hide+Gridlines</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Page Break Preview</Title>
                      <Description>All worksheets can be viewed in two modes:

- Normal View
- Page Break Preview

Normal View is the default view of a worksheet that we normally experience while working on worksheets where as Page Break Preview is an editing view that displays a worksheet as it will print. Page Break Preview shows that what data will go on each page so, you can adjust the print area and page breaks. Using Aspose.Cells, developers can enable normal view or page break preview modes for their desired worksheets using IsPageBreakPreview property of the Worksheet class. IsPageBreakPreview is a boolean property, which means that it can only store a true or false value. This example describes the Page Break Preview in detail.</Description>
                      <FolderName>PageBreakPreview</FolderName>
                      <Order>5</Order>
                      <DocLink>
                        <DisplayName>Page Break Preview</DisplayName>
                        <Url>Page+Break+Preview</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Zoom Factor</Title>
                      <Description>Microsoft Excel provides a feature to set the Zoom or Scaling Factor of the worksheets. This feature helps users to see the contents of their worksheets in smaller or larger views. Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a Worksheets collection that allows to access each worksheet in the Excel file.
A worksheet is represented by the Worksheet class. Worksheet class provides a wide range of properties and methods to manage a worksheet. But, to set the zoom factor of a worksheet, developers may use Zoom property of the Worksheet class. Developers can assign a numeric (integer) value to the Zoom property as a zoom factor. This example explains the usage of Zoom property in detail.</Description>
                      <FolderName>ZoomFactor</FolderName>
                      <Order>6</Order>
                      <DocLink>
                        <DisplayName>Zoom Factor</DisplayName>
                        <Url>Zoom+Factor</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
              </Folders>
            </Folder>
          </Folders>
        </Folder>
      </Folders>
    </Folder>
  </Folders>
</Data>