<?xml version="1.0" encoding="utf-8"?>
<Data>
  <Folders>
    <Folder>
      <Title>Programmers Guide</Title>
      <Description>Programmers Guide provides code samples about key programming concepts to build .NET and other applications that use Aspose.Cells for .NET</Description>
      <FolderName>ProgrammersGuide</FolderName>
      <Order>1</Order>
      <Folders>
        <Folder>
          <Title>Aspose.Cells</Title>
          <Description>This section includes examples related to the following topics: 

- Introduction of Aspose.Cells for .NET
- Working with Files
- Working with Worksheets
- Working with Rows and Columns
- Working with Data
- Working with Data Formatting
- Working with Tables
- Working with Formulas
- Creating Charts
- Working with Other Drawing Objects
- Working with Pivot Tables
- Working with CellsHelper Methods
- Advanced Topics
- Utilize Aspose.Cells in other Programming Languages</Description>
          <FolderName>AsposeCells</FolderName>
          <Order>1</Order>
          <Folders>
            <Folder>
              <Title>Working With Files</Title>
              <Description>Contains examples for file handling and utility features.</Description>
              <FolderName>WorkingWithFiles</FolderName>
              <Order>1</Order>
              <Folders>
                <Folder>
                  <Title>Utility Features</Title>
                  <Description>Includes Examples for Rendering/Conversion to other formats, Managing Document Properties and Encryption of Documents etc.</Description>
                  <FolderName>UtilityFeatures</FolderName>
                  <Order>1</Order>
                  <Examples>
                    <Example>
                      <Title>Excel to PDF Conversion</Title>
                      <Description>Aspose.Cells for .NET supports conversion from spreadsheets to PDF independently of other software. Save an Excel file to PDF using the Workbook class' Save method. The Save method provides the SaveFormat.Pdf enum member that converts the native Excel files to PDF format.</Description>
                      <FolderName>Excel2PDFConversion</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Converting to PDF Files</DisplayName>
                        <Url>Converting+to+PDF+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\outBook1.pdf</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Chart To Image</Title>
                      <Description>Example to convert charts in Excel files to images. This helps to present data in an easy to read and easy to maintain way for users.</Description>
                      <FolderName>ChartToImage</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Converting Chart to Image</DisplayName>
                        <Url>Converting+Chart+to+Image</Url>
                      </DocLink>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Chart.emf</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Worksheet to Image</Title>
                      <Description>Aspose.Cells supports converting Excel worksheets to images. To use this feature, you need to import the Aspose.Cells.Rendering namespace to your program or  and use ToImage method, that can convert a worksheet to image file(s) with different attributes or options.</Description>
                      <FolderName>WorksheetToImage</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Converting Worksheet to Image</DisplayName>
                        <Url>Converting+Worksheet+to+Image</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\MyTestBook1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\SheetImage.jpg</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Converting to XPS</Title>
                      <Description>The XPS document format consists of structured XML markup that defines the layout of a document and the visual appearance of each page, along with rendering rules for distributing, archiving, rendering, processing and printing the documents. Notably, the markup language for XPS is a subset of XAML, allowing it to incorporate vector-graphic elements in documents, using XAML to mark up the Windows Presentation Foundation (WPF) primitives. The elements used are described in terms of paths and other geometrical primitives.
An XPS file is in fact a Unicoded ZIP archive using the Open Packaging Conventions, containing the files which make up the document. These include an XML markup file for each page, text, embedded fonts, raster images, 2D vector graphics, as well as the digital rights management information. The contents of an XPS file can be examined simply by opening it in an application which supports ZIP files.

You might require to convert Excel files to XPS files. Since the release of v6.0.0, Aspose.Cells supports Excel-to-XPS feature.</Description>
                      <FolderName>ConvertingToXPS</FolderName>
                      <Order>4</Order>
                      <DocLink>
                        <DisplayName>Converting to XPS</DisplayName>
                        <Url>Converting+to+XPS</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\out_printingxps.xps</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\out_whole_printingxps.xps</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Managing Document Properties</Title>
                      <Description>Microsoft Excel provides a feature to add some properties to the Excel files. These document properties allow some useful information to be stored along with the documents (Excel files). There are two kinds of document properties as follows:

- System Defined (Built-in) Properties
- User Defined (Custom) Properties

Built-in properties contain general information about the document like document title, author's name, document statistics and so on. Custom properties are those ones, which are defined by the users as Name/Value pairs, where both name and value are defined by the user. The most important point to know about the built-in and custom properties is that built-in properties can be accessed and modified only but not created or removed because these properties are system defined. However, custom properties can be created and managed freely by the developers because these properties are defined by the users.</Description>
                      <FolderName>ManagingDocumentProperties</FolderName>
                      <Order>5</Order>
                      <DocLink>
                        <DisplayName>Managing Document Properties</DisplayName>
                        <Url>Managing+Document+Properties</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Test_Workbook.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Test_Workbook_RemovedProperty.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Encrypting Files</Title>
                      <Description>Microsoft Excel (97 - 2007) enables you to encrypt / password protect your spreadsheets. It utilizes algorithms provided by Crypto Service Provider. A Crypto Service Provider or CSP is a set of cryptographic algorithms with different properties. The default CSP is "Office 97/2000 Compatible" or "Week Encryption (XOR)". It's also important to choose a proper encryption key length. Some of the Crypto Service Providers don't support more than 40 or 56 bits. That's considered to be a weak encryption type. But, for strong encryption type, a minimum key length of 128 bits is required. Microsoft Windows contains Crypto Service Providers that offer strong encryption types as well, for example the 'Microsoft Strong Cryptographic Provider'. To give an idea, 128 bits encryption is what banks use to encrypt the connection with their Internet Banking systems. Aspose.Cells allows you to encrypt / password protect your excel files with your desired encryption type.

This example shows how you can encrypt / password protect an excel file using the Aspose.Cells API.</Description>
                      <FolderName>EncryptingFiles</FolderName>
                      <Order>6</Order>
                      <DocLink>
                        <DisplayName>Encrypting Files</DisplayName>
                        <Url>Encrypting+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\encryptedBook1.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Converting Worksheet to SVG</Title>
                      <Description>SVG stands for Scalable Vector Graphics. SVG is a specification based on XML standards for two-dimensional vector graphics. It is an open standard that has been under development by the World Wide Web Consortium (W3C) since 1999.
Since the release of v7.1.0, Aspose.Cells can convert worksheets into SVG images.

To use this feature, you need to import the Aspose.Cells.Rendering namespace to your program or project. It has several valuable classes for rendering and printing, for example SheetRender, ImageOrPrintOptions, WorkbookRender and others. 

The Aspose.Cells.Rendering.ImageOrPrintOptions class specifies that the worksheet will be saved in SVG format.

The Aspose.Cells.Rendering.SheetRender class takes the object of ImageOrPrintOptions as a parameter. It has an overloaded method, ToImage, that converts a worksheet to SVG format.</Description>
                      <FolderName>ConvertingWorksheetToSVG</FolderName>
                      <Order>7</Order>
                      <DocLink>
                        <DisplayName>Converting Worksheet to SVG</DisplayName>
                        <Url>Converting+Worksheet+to+SVG</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Template.xlsx</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Template.xlsxSheet10.out.svg</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Template.xlsxSheet20.out.svg</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Converting to MHTML Files</Title>
                      <Description>MHTML combines normal HTML with external resources (that is, content that is usually linked in like images, animations, audio and so on) into one file. They are used for emails with the .mht file extension.
Aspose.Cells supports reading and writing MHTML files.</Description>
                      <FolderName>ConvertingToMHTMLFiles</FolderName>
                      <Order>8</Order>
                      <DocLink>
                        <DisplayName>Converting to MHTML Files</DisplayName>
                        <Url>http://www.aspose.com/docs/display/cellsjava/Converting+to+MHTML+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xlsx</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xlsx.out.mht</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
                <Folder>
                  <Title>File Handling Features</Title>
                  <Description>This section includes examples related to following topics: 

- Opening Files
- Saving Files
- Save Entire Workbook into Text or CSV Format</Description>
                  <FolderName>FileHandlingFeatures</FolderName>
                  <Order>2</Order>
                  <Examples>
                    <Example>
                      <Title>Opening Files</Title>
                      <Description>Developers can make use of Aspose.Cells to open existing files for different purposes. For example, you can open an existing file to retrieve data from it or you can use a pre-defined Designer Spreadsheet file to speed up your development process etc. Aspose.Cells allows developers to open different kinds of source files. These source files can be Excel reports (XLS, XLSX, XLSM, XLSB etc.), SpreadsheetML, CSV or Tab Delimited files. In this example, we will show how opening of these different kinds of source files is performed using Aspose.Cells.</Description>
                      <FolderName>OpeningFiles</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Opening Files</DisplayName>
                        <Url>Opening+Files</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xlsx</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book_Excel2007.xlsx</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book2.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book_Excel97_2003.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book3.xml</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book_CSV.csv</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\Book1TabDelimited.txt</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\encryptedBook.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Save Entire Workbook into Text or CSV Format</Title>
                      <Description>Sometimes, you want to convert/save the entire workbook with multiple worksheets into text format. For text formats (e.g Txt, Tab Delimited, CSV etc), by default both Ms-Excel and Aspose.Cells save the contents of active worksheet only.</Description>
                      <FolderName>SaveWorkbookToTextCSVFormat</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Save Entire Workbook into Text or CSV Format</DisplayName>
                        <Url>Save+Entire+Workbook+into+Text+or+CSV+Format</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\out.txt</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Saving Files</Title>
                      <Description>Aspose.Cells allows developers to create Excel files from scratch using its flexible API, you may also manipulate existing files. Once you create Excel files, you would also need to save your work (file). Aspose.Cells provides a variety of ways to save these files. In this topic, we will discuss all those possible ways that can be adopted by developers to save their files.</Description>
                      <FolderName>SavingFiles</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Saving Files</DisplayName>
                        <Url>Saving+Files</Url>
                      </DocLink>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\book1.html</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\book1.ods</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\book1.pdf</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\book1.xlsb</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\book1.xlsx</Path>
                        </DataFile>
                        <DataFile>
                          <Path>..\Data\book1.xml</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
              </Folders>
            </Folder>
            <Folder>
              <Title>Working with Worksheets</Title>
              <Description>This section includes examples related to the following topics: 

- Management Features
- Display Features
- Security Features
- Page Setup Features
- Value Features</Description>
              <FolderName>WorkingWithWorksheets</FolderName>
              <Order>2</Order>
              <Folders>
                <Folder>
                  <Title>Display Features</Title>
                  <Description>This Section includes examples related to following topics: 

- Hide or Unhide a Worksheet
- Display or Hide Tabs
- Display or Hide Scroll Bars
- Display or Hide Gridlines
- Display or Hide Row Column Headers
- Page Break Preview
- Zoom Factor
- Freeze Panes
- Split Panes</Description>
                  <FolderName>DisplayFeatures</FolderName>
                  <Order>1</Order>
                  <Examples>
                    <Example>
                      <Title>Hide or Unhide a Worksheet</Title>
                      <Description>An Excel file can have one or more than one worksheets. Whenever we create an Excel file, we add worksheets to the Excel file in which we work. Each worksheet in an Excel file is independent from the other worksheet by having its own data and formatting settings etc. Sometimes, developers may require to make few worksheets hidden and others visible in the Excel file for their own interest. So, Aspose.Cells allows developers to control the visibility of the worksheets in their Excel files.

Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a Worksheets collection that allows to access each worksheet in the Excel file.

A worksheet is represented by the Worksheet class. Worksheet class provides a wide range of properties and methods to manage a worksheet. But, to control the visibility of a worksheet, developers may use IsVisible property of the Worksheet class. IsVisible is a boolean property, which means that it can only store a true or false value. This example elaborates the use of this property according to his/her requirements.</Description>
                      <FolderName>HideUnhideWorksheet</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Hide or Unhide a Worksheet</DisplayName>
                        <Url>Hide+or+Unhide+a+Worksheet</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Tabs</Title>
                      <Description>Sheet Tabs are the tabs that represent all worksheets in the Excel file. You can click on any desired tab to switch to a particular worksheet. The more worksheets you have, the more sheet tabs will be created. If your Excel file has a good number of worksheets then you would also need some buttons to navigate through all of these sheet tabs.

Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class provides a wide range of properties and methods to manage an Excel file. But, to control the visibility of the tabs in the Excel file, developers may use ShowTabs property of the Workbook class. ShowTabs is a boolean property, which means that it can only store a true or false value. Developers can hide the tabs of the Excel file by setting the ShowTabs property of the Workbook class to false. In this example this is explained in detail.</Description>
                      <FolderName>DisplayHideTabs</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Tabs</DisplayName>
                        <Url>Display+or+Hide+Tabs</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Scroll Bars</Title>
                      <Description>Microsoft Excel also provides Horizontal &amp; Vertical Scroll Bars to scroll through the contents of the worksheets. Using Aspose.Cells, developers can control the visibility of both of these scroll bars in their Excel files. Developers can hide the vertical or horizontal scroll bars of the Excel file by setting the IsVScrollBarVisible or IsHScrollBarVisible property of the Workbook class to false. This example describes the use of this property in detail.</Description>
                      <FolderName>DisplayHideScrollBars</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Scroll Bars</DisplayName>
                        <Url>Display+or+Hide+Scroll+Bars</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Gridlines</Title>
                      <Description>All Excel worksheets have Gridlines by default, which helps us in entering data to particular cells of a worksheet. Gridlines enable us to view a worksheet as a collection of cells, where each cell is easily identifiable. Using, Aspose.Cells , developers can also control the visibility of the gridlines in their worksheets.

Developers can hide gridlines by setting the IsGridlinesVisible property of the Worksheet class to false. In this example this is explained in detail.</Description>
                      <FolderName>DisplayHideGridlines</FolderName>
                      <Order>4</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Gridlines</DisplayName>
                        <Url>Display+or+Hide+Gridlines</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Page Break Preview</Title>
                      <Description>All worksheets can be viewed in two modes:

- Normal View
- Page Break Preview

Normal View is the default view of a worksheet that we normally experience while working on worksheets where as Page Break Preview is an editing view that displays a worksheet as it will print. Page Break Preview shows that what data will go on each page so, you can adjust the print area and page breaks. Using Aspose.Cells, developers can enable normal view or page break preview modes for their desired worksheets using IsPageBreakPreview property of the Worksheet class. IsPageBreakPreview is a boolean property, which means that it can only store a true or false value. This example describes the Page Break Preview in detail.</Description>
                      <FolderName>PageBreakPreview</FolderName>
                      <Order>5</Order>
                      <DocLink>
                        <DisplayName>Page Break Preview</DisplayName>
                        <Url>Page+Break+Preview</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Zoom Factor</Title>
                      <Description>Microsoft Excel provides a feature to set the Zoom or Scaling Factor of the worksheets. This feature helps users to see the contents of their worksheets in smaller or larger views. Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a Worksheets collection that allows to access each worksheet in the Excel file.
A worksheet is represented by the Worksheet class. Worksheet class provides a wide range of properties and methods to manage a worksheet. But, to set the zoom factor of a worksheet, developers may use Zoom property of the Worksheet class. Developers can assign a numeric (integer) value to the Zoom property as a zoom factor. This example explains the usage of Zoom property in detail.</Description>
                      <FolderName>ZoomFactor</FolderName>
                      <Order>6</Order>
                      <DocLink>
                        <DisplayName>Zoom Factor</DisplayName>
                        <Url>Zoom+Factor</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Display or Hide Row Column Headers</Title>
                      <Description>All worksheets in an Excel file are composed of cells that are arranged in the form of rows and columns. All rows and columns have unique values that are used to identify a particular row, column or cell. For example, rows are numbered as 1, 2, 3, 4 etc. and columns are ordered alphabetically as A, B, C, D etc. These values of the rows and columns are displayed as their headers. Rows and columns, both have their own row and column headers respectively. Using, Aspose.Cells , developers can control the visibility of these row/column headers in their worksheets.</Description>
                      <FolderName>DisplayHideRowColumnHeaders</FolderName>
                      <Order>7</Order>
                      <DocLink>
                        <DisplayName>Display or Hide Row Column Headers</DisplayName>
                        <Url>Display+or+Hide+Row+Column+Headers</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Freeze Panes</Title>
                      <Description>Freeze Panes is also another good feature provided by Microsoft Excel. Freezing panes allows you to select data that remains visible when scrolling in a worksheet. Aspose.Cells also allows developers to apply this freeze panes feature (offered by Microsoft Excel) in their worksheets at runtime using its robust API.</Description>
                      <FolderName>FreezePanes</FolderName>
                      <Order>8</Order>
                      <DocLink>
                        <DisplayName>Freeze Panes</DisplayName>
                        <Url>Freeze+Panes</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Split Panes</Title>
                      <Description>If you need to split the screen to give you two different views into the same worksheet, you split panes. Excel offers a very handy feature to allow you view more than one copy of your worksheet, and for you to be able to scroll through each pane of your worksheet independently. You can do this by using a feature called Split Panes. When you split panes. The panes of your worksheet work simultaneously. If you make a change in one, it will simultaneously appear in the other. Aspose.Cells provides Split Panes feature for the users.</Description>
                      <FolderName>SplitPanes</FolderName>
                      <Order>9</Order>
                      <DocLink>
                        <DisplayName>Split Panes</DisplayName>
                        <Url>Split+Panes</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\Splitted_out1.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
                <Folder>
                  <Title>Management Features</Title>
                  <Description>This Section includes following topics:

1: Managing Worksheets</Description>
                  <FolderName>ManagementFeatures</FolderName>
                  <Order>2</Order>
                  <Folders>
                    <Folder>
                      <Title>Managing Worksheets</Title>
                      <Description>Managing worksheets using Aspose.Cells is as easy as ABC. In this section, we have included the following features:

1: Add worksheets to a new Excel file
2: Add worksheets to an existing Excel file
3: Remove a worksheet from an Excel file using its sheet name
4: Remove a worksheet from an Excel file using its sheet index</Description>
                      <FolderName>ManagingWorksheets</FolderName>
                      <Order>1</Order>
                      <Examples>
                        <Example>
                          <Title>Adding Worksheets to a New Excel File</Title>
                          <Description>To create a new Excel file programmatically, developers would need to create an object of Workbook class that represents an Excel file. Then developers can call Add method of the Worksheets collection. When we call Add method, an empty worksheet is added to the Excel file automatically, which can be referenced by passing the sheet index of the newly added worksheet to the Worksheets collection. After the worksheet reference is obtained, developers can work on their worksheets according to their requirements. After the work is done on the worksheets, developers can save their newly created Excel file with new worksheets by calling the Save method of the Workbook class.</Description>
                          <FolderName>AddingWorksheetsToNewExcelFile</FolderName>
                          <Order>1</Order>
                          <DocLink>
                            <DisplayName>Adding Worksheets to a New Excel File</DisplayName>
                            <Url>Managing+Worksheets</Url>
                          </DocLink>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\output.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Adding Worksheets to an Existing PDF file</Title>
                          <Description>The process of adding worksheets to a designer spreadsheet is entirely same as that of the above approach except that the Excel file is already created and we need to open that Excel file first before adding worksheet to it. A designer spreadsheet can be opened by the Workbook class.</Description>
                          <FolderName>AddWorksheetsToExistingExcelFile</FolderName>
                          <Order>2</Order>
                          <DocLink>
                            <DisplayName>Managing Worksheets</DisplayName>
                            <Url>Managing+Worksheets</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\output.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Removing Worksheets using Sheet Name</Title>
                          <Description>Sometimes, developers may need to remove worksheets from existing Excel files and that task can be performed by calling the RemoveAt method of the Worksheets collection. We can pass sheet name to the RemoveAt method to remove a specific worksheet.</Description>
                          <FolderName>RemovingWorksheetsUsingSheetName</FolderName>
                          <Order>3</Order>
                          <DocLink>
                            <DisplayName>Managing Worksheets</DisplayName>
                            <Url>Managing+Worksheets</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\output.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Removing Worksheets using Sheet Index</Title>
                          <Description>This examples showns how to remove a worksheet from a workbook using the index of the worksheet.</Description>
                          <FolderName>RemovingWorksheetsUsingSheetIndex</FolderName>
                          <Order>4</Order>
                          <DocLink>
                            <DisplayName>Managing Worksheets</DisplayName>
                            <Url>Managing+Worksheets</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\output.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                      </Examples>
                    </Folder>
                  </Folders>
                </Folder>
                <Folder>
                  <Title>Security Features</Title>
                  <Description>This section includes following topics: 

1: Protecting Worksheets
2: Advanced Protection Settings since Excel XP
3: Unprotect a Worksheet</Description>
                  <FolderName>SecurityFeatures</FolderName>
                  <Order>3</Order>
                  <Examples>
                    <Example>
                      <Title>Advanced Protection Settings Using Aspose.Cells</Title>
                      <Description>All of these advanced protection settings in Excel XP are supported in Aspose.Cells. Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a Worksheets collection that allows to access each worksheet in the Excel file. A worksheet is represented by the Worksheet class.

Worksheet class provides Protection property that is used to apply these advanced protection settings of Excel XP on the worksheets. Protection property is in fact an object of Protection class that encapsulates several boolean properties to disable or enable the restrictions on the worksheets.</Description>
                      <FolderName>AdvancedProtectionSettingsUsingAspose.Cells</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Advanced Protection Settings since Excel XP</DisplayName>
                        <Url>Advanced+Protection+Settings+since+Excel+XP</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                  <Folders>
                    <Folder>
                      <Title>Protecting Worksheets</Title>
                      <Description>This section includes following topics: 

1: Protecting a Worksheet.
2: Protecting Specific Cells in a Worksheet.
3: Protecting Specific Row in a Worksheet.
4: Protecting Specific Column in a Worksheet.
5: Allow user to edit Ranges in a Worksheet.</Description>
                      <FolderName>ProtectingWorksheets</FolderName>
                      <Order>1</Order>
                      <Examples>
                        <Example>
                          <Title>Protecting a Worksheet</Title>
                          <Description>Worksheet class provides Protect method that is used to apply appropriate protection on the worksheet. Protect method accepts the following parameters:

1: Protection Type, represents the type of protection to apply on the worksheet. Protection type is applied with the help of ProtectionType enumeration
2: New Password, represents the new password that is used to protect the worksheet
3: Old Password, represents the old password, if the worksheet is already protected by a password. If the worksheet is not already protected then just pass a null.</Description>
                          <FolderName>ProtectingWorksheet</FolderName>
                          <Order>1</Order>
                          <DocLink>
                            <DisplayName>Protecting Worksheets</DisplayName>
                            <Url>Protecting+Worksheets</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\output.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Protecting Specific Cells in a Worksheet</Title>
                          <Description>There might be certain scenarios where you need to lock a few cells only in the worksheet. If you want to lock some specific cells in the worksheet, you have to unlock all the other cells in the worksheet. All the cells in a worksheet are already initialized for locking, you may check this opening any excel file into MS Excel and click the Format | Cells...*to show *Format Cells dialog box and then click the Protection tab and see a check box labeled "Locked" is checked by default.</Description>
                          <FolderName>ProtectingSpecificCellsinaWorksheet</FolderName>
                          <Order>2</Order>
                          <DocLink>
                            <DisplayName>Protecting Worksheets</DisplayName>
                            <Url>Protecting+Worksheets</Url>
                          </DocLink>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\output.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Protecting Specific Row in a Worksheet</Title>
                          <Description>Aspose.Cells allows you to easily lock any row in the worksheet. Here, we can make use of ApplyStyle() method of Aspose.Cells.Row class to apply Style to a particular row in the worksheet. This method takes two arguments: a Style object and StyleFlag object which has all the members related to applied formatting.</Description>
                          <FolderName>ProtectingSpecificRowInWorksheet</FolderName>
                          <Order>3</Order>
                          <DocLink>
                            <DisplayName>Protecting Worksheets</DisplayName>
                            <Url>Protecting+Worksheets</Url>
                          </DocLink>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\output.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Protecting Specific Column in a Worksheet</Title>
                          <Description>Aspose.Cells allows you to easily lock any column in the worksheet. Here, we can make use of ApplyStyle() method of Aspose.Cells.Column class to apply Style to a particular column in the worksheet. This method takes two arguments: a Style object and StyleFlag object which has all the members related to applied formatting.</Description>
                          <FolderName>ProtectingSpecificColumnInWorksheet</FolderName>
                          <Order>4</Order>
                          <DocLink>
                            <DisplayName>Protecting Worksheets</DisplayName>
                            <Url>Protecting+Worksheets</Url>
                          </DocLink>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\output.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Allow User to Edit Ranges in a Worksheet</Title>
                          <Description>The following example shows how to allow users to edit a range in a protected worksheet.</Description>
                          <FolderName>AllowUserToEditRangesInWorksheet</FolderName>
                          <Order>5</Order>
                          <DocLink>
                            <DisplayName>Protecting Worksheets</DisplayName>
                            <Url>Protecting+Worksheets</Url>
                          </DocLink>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\protectedrange.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                      </Examples>
                    </Folder>
                    <Folder>
                      <Title>Unprotect a Worksheet</Title>
                      <Description>If a developer needs to unprotect a protected worksheet at runtime, it is very easy with the help of the API of Aspose.Cells. This section includes the following examples:

1: Unprotecting a Simply Protected Worksheet
2: Unprotecting a Password Protected Worksheet</Description>
                      <FolderName>UnprotectWorksheet</FolderName>
                      <Order>3</Order>
                      <Examples>
                        <Example>
                          <Title>Unprotecting a Simply Protected Worksheet</Title>
                          <Description>A simply protected worksheet is the one, which is not protected with a password. Such worksheets can be unprotected by calling the Unprotect method without passing a parameter.</Description>
                          <FolderName>UnprotectingSimplyProtectedWorksheet</FolderName>
                          <Order>1</Order>
                          <DocLink>
                            <DisplayName>Unprotect a Worksheet</DisplayName>
                            <Url>Unprotect+a+Worksheet</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\output.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Unprotecting a Password Protected Worksheet</Title>
                          <Description>A password protected worksheet can be unprotected by calling an overloaded version of Unprotect method that takes the password (required to unprotect the worksheet) as a parameter.</Description>
                          <FolderName>UnprotectingPasswordProtectedWorksheet</FolderName>
                          <Order>2</Order>
                          <DocLink>
                            <DisplayName>Unprotect a Worksheet</DisplayName>
                            <Url>Unprotect+a+Worksheet</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <OutputFiles>
                            <DataFile>
                              <Path>..\Data\output.xls</Path>
                            </DataFile>
                          </OutputFiles>
                          <Type>Console</Type>
                        </Example>
                      </Examples>
                    </Folder>
                  </Folders>
                </Folder>
              </Folders>
            </Folder>
            <Folder>
              <Title>Working with Rows and Columns</Title>
              <Description>This section includes the following examples: 

1: Inserting Deleting Rows and Columns
2: Hiding Unhiding Rows and Columns
3: Grouping Ungrouping Rows and Columns
4: Adjusting Row Height and Column Width
5: AutoFit Rows and Columns
6: Copying Rows and Columns</Description>
              <FolderName>WorkingWithRowsAndColumns</FolderName>
              <Order>3</Order>
              <Folders>
                <Folder>
                  <Title>Inserting Deleting Rows and Columns</Title>
                  <Description>This section includes the following examples:

1: Inserting a Row
2: Inserting Multiple Rows
3: Deleting a Row
4: Deleting Multiple Rows
5: Inserting a Column
6: Deleting a Column</Description>
                  <FolderName>InsertingDeletingRowsAndColumns</FolderName>
                  <Order>1</Order>
                  <Examples>
                    <Example>
                      <Title>Inserting a Row</Title>
                      <Description>Developers can insert a row into the worksheet at any location by calling the InsertRow method of the Cells collection. InsertRow method takes the index of the row where the new row will be inserted.</Description>
                      <FolderName>InsertingARow</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Inserting Deleting Rows and Columns</DisplayName>
                        <Url>Inserting+Deleting+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Inserting Multiple Rows</Title>
                      <Description>Sometimes, developers may need to insert multiple rows into the worksheet. It can be done by calling the InsertRows method of the Cells collection. InsertRows method takes two parameters:

1: Row Index, the index of the row from where the new rows will be inserted
2: Number of Rows, total number of rows that need to be inserted</Description>
                      <FolderName>InsertingMultipleRows</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Inserting Deleting Rows and Columns</DisplayName>
                        <Url>Inserting+Deleting+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Deleting a Row</Title>
                      <Description>Developers can delete a row from the worksheet at any location by calling the DeleteRow method of the Cells collection. DeleteRow method takes the index of the row that needs to be deleted.</Description>
                      <FolderName>DeletingARow</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Inserting Deleting Rows and Columns</DisplayName>
                        <Url>Inserting+Deleting+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Deleting Multiple Rows</Title>
                      <Description>If developers need to delete multiple rows from the worksheet, It can also be done by calling the DeleteRows method of the Cells collection. DeleteRows method takes two parameters:

1: Row Index, the index of the row from where the rows will be deleted.
2: Number of Rows, total number of rows that need to be deleted.</Description>
                      <FolderName>DeletingMultipleRows</FolderName>
                      <Order>4</Order>
                      <DocLink>
                        <DisplayName>Inserting Deleting Rows and Columns</DisplayName>
                        <Url>Inserting+Deleting+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Inserting a Column</Title>
                      <Description>Developers can also insert a column into the worksheet at any location by calling the InsertColumn method of the Cells collection. InsertColumn method takes the index of the column where the new column will be inserted.</Description>
                      <FolderName>InsertingAColumn</FolderName>
                      <Order>5</Order>
                      <DocLink>
                        <DisplayName>Inserting Deleting Rows and Columns</DisplayName>
                        <Url>Inserting+Deleting+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Deleting a Column</Title>
                      <Description>To delete a column from the worksheet at any location, developers can call DeleteColumn method of the Cells collection. DeleteColumn method takes the index of the column to delete.</Description>
                      <FolderName>DeletingAColumn</FolderName>
                      <Order>6</Order>
                      <DocLink>
                        <DisplayName>Inserting Deleting Rows and Columns</DisplayName>
                        <Url>Inserting+Deleting+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
                <Folder>
                  <Title>Hiding Unhiding Rows and Columns</Title>
                  <Description>Sometimes, it may also be required by users to hide certain rows or columns of the worksheet and then display them later. Microsoft Excel provides this feature and so as Aspose.Cells. This section includes the following examples:

1: Hiding Rows/Columns
2: Unhiding Rows/Columns
3: Hiding Multiple Rows/Columns</Description>
                  <FolderName>HidingUnhidingRowsAndColumns</FolderName>
                  <Order>2</Order>
                  <Examples>
                    <Example>
                      <Title>Hiding Rows and Columns</Title>
                      <Description>Developers can hide a row or column by calling the HideRow and HideColumn methods of the Cells collection respectively. Both methods take the row/column index as a parameter to hide the specific row or column.</Description>
                      <FolderName>HidingRowsAndColumns</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Hiding Unhiding Rows and Columns</DisplayName>
                        <Url>Hiding+Unhiding+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Unhiding Rows and Columns</Title>
                      <Description>Developers can unhide any hidden row or column by calling the UnhideRow and UnhideColumn methods of the Cells collection respectively. Both methods take two parameters:

1: Row/Column Index represents the index of a row or column that is used to unhide the specific row or column.
2: Row Height/Column Width represents row height or column width that can assigned to the row or column after unhiding.</Description>
                      <FolderName>UnhidingRowsAndColumns</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Hiding Unhiding Rows and Columns</DisplayName>
                        <Url>Hiding+Unhiding+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Hiding Multiple Rows and Columns</Title>
                      <Description>Developers can hide multiple rows or columns at a time by calling the HideRows and HideColumns methods of the Cells collection respectively. Both methods can take the starting row/column index and rows/columns count to be hidden as parameters to hide the specific number of rows or columns.</Description>
                      <FolderName>HidingMultipleRowsAndColumns</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Hiding Unhiding Rows and Columns</DisplayName>
                        <Url>Hiding+Unhiding+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
                <Folder>
                  <Title>Grouping Ungrouping Rows and Columns</Title>
                  <Description>This section includes the following examples:

1: Grouping Rows &amp; Columns
2: Ungrouping Rows &amp; Columns</Description>
                  <FolderName>GroupingUngroupingRowsAndColumns</FolderName>
                  <Order>3</Order>
                  <Examples>
                    <Example>
                      <Title>Grouping Rows and Columns</Title>
                      <Description>Developers can group rows or columns by calling the GroupRows and GroupColumns methods of the Cells collection respectively. Both methods take three parameters as follows:

1: First Row/Column Index , represents the first row/column index to be grouped
2: Last Row/Column Index , represents the last row/column index to be grouped
3: Is Hidden , a boolean parameter to specify that whether to hide rows/columns after grouping or not</Description>
                      <FolderName>GroupingRowsAndColumns</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Grouping Ungrouping Rows and Columns</DisplayName>
                        <Url>Grouping+Ungrouping+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Ungrouping Rows and Columns</Title>
                      <Description>Developers can ungroup any grouped rows or columns by calling the UngroupRows and UngroupColumns methods of the Cells collection respectively. Both methods take two parameters:

1: First Row/Column Index , represents the first row/column index to be ungrouped
2: Last Row/Column Index , represents the last row/column index to be ungrouped</Description>
                      <FolderName>UngroupingRowsAndColumns</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Grouping Ungrouping Rows and Columns</DisplayName>
                        <Url>Grouping+Ungrouping+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
                <Folder>
                  <Title>Adjusting Row Height and Column Width</Title>
                  <Description>When we work with spreadsheets and add data to rows or columns, we might need to increase or decrease the height of the rows or width of the columns. Sometimes, just because of applying some formatting settings on the rows or columns, we also may need to do so. Normally, you adjust your row heights and column widths in a WYSIWYG environment using Microsoft Excel. But, Aspose.Cells gives you the power to perform these operations at runtime.

This section includes the following examples:

1: Setting the Height of a Row
2: Setting the Height of All Rows in a Worksheet
3: Setting the Width of a Column
4: Setting the Width of All Columns in a Worksheet</Description>
                  <FolderName>AdjustingRowHeightAndColumnWidth</FolderName>
                  <Order>4</Order>
                  <Examples>
                    <Example>
                      <Title>Setting the Height of a Row</Title>
                      <Description>Developers can set the height of a single row by calling SetRowHeight method of the Cells collection. SetRowHeight method takes two parameters as follows:* Row Index , represents the index of the row whose height is needed to change* Row Height , represents the desired row height to apply on the row.</Description>
                      <FolderName>SettingHeightOfRow</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Adjusting Row Height and Column Width</DisplayName>
                        <Url>Adjusting+Row+Height+and+Column+Width</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Setting the Height of All Rows in a Worksheet</Title>
                      <Description>If developers need to set the same row height for all rows in the worksheet, they can do it by using the StandardHeight property of the Cells collection.</Description>
                      <FolderName>SettingHeightOfAllRowsInWorksheet</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Adjusting Row Height and Column Width</DisplayName>
                        <Url>Adjusting+Row+Height+and+Column+Width</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Setting the Width of a Column</Title>
                      <Description>Developers can set the width of a column by calling SetColumnWidth method of the Cells collection. SetColumnWidth method takes two parameters as follows:* Column Index , represents the index of the column whose width is needed to change* Column Width , represents the desired column width to apply on the column.</Description>
                      <FolderName>SettingWidthOfColumn</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Adjusting Row Height and Column Width</DisplayName>
                        <Url>Adjusting+Row+Height+and+Column+Width</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Setting the Width of All Columns in a Worksheet</Title>
                      <Description>If developers need to set the same column width for all columns in the worksheet, they can do it by using the StandardWidth property of the Cells collection.</Description>
                      <FolderName>SettingWidthOfAllColumnsInWorksheet</FolderName>
                      <Order>4</Order>
                      <DocLink>
                        <DisplayName>Adjusting Row Height and Column Width</DisplayName>
                        <Url>Adjusting+Row+Height+and+Column+Width</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
                <Folder>
                  <Title>Copying Rows and Columns</Title>
                  <Description>Ometimes, you 'll need to copy rows and columns in a worksheet without copying the entire worksheet. Aspose.Cells has this ability to copy rows and columns within or between workbooks. When you copy a row / column, it will copy all the data that the row / column contains, including formulas (with updated reference) and their resulting values, comments, cell formats, hidden cells, images and other drawing objects etc with high degree of accuracy and precision.

This section includes the following examples:

1: Copying Rows
2: Copying Columns</Description>
                  <FolderName>CopyingRowsAndColumns</FolderName>
                  <Order>5</Order>
                  <Examples>
                    <Example>
                      <Title>Copying Rows</Title>
                      <Description>Aspose.Cells provides CopyRow method of the Aspose.Cells.Cells class, this method copies all types of data including formulas (with updated reference) and their resulting values, comments, cell formats, hidden cells, images and other drawing objects etc. from the source row to the destination row. This method takes three parameters i.e. source Cells object, source row index and destination row index. You may utilize this method to copy a row within a workbook sheets or to another workbook sheets. The CopyRow method works in the similar way as MS Excel. So, you  don't really need to set row height for the destination row as per the source row height, the destination row height would be of same to the source row height.</Description>
                      <FolderName>CopyingRows</FolderName>
                      <Order>1</Order>
                      <DocLink>
                        <DisplayName>Copying Rows and Columns</DisplayName>
                        <Url>Copying+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\Book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Copying Columns</Title>
                      <Description>Aspose.Cells provides CopyColumn method of the Aspose.Cells.Cells class, this method copies all types of data including formulas (with updated reference) and their resulting values, comments, cell formats, hidden cells, images and other drawing objects etc. from the source column to the destination column. This method takes three parameters i.e. source Cells object, source column index and destination column index. You may utilize this method to copy a column within a workbook sheets or to another workbook sheets.</Description>
                      <FolderName>CopyingColumns</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Copying Rows and Columns</DisplayName>
                        <Url>Copying+Rows+and+Columns</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                </Folder>
              </Folders>
            </Folder>
            <Folder>
              <Title>Working with Data</Title>
              <Description>This section includes the following:

1: Data Handling Features
2: Data Processing Features
3: Add on Features</Description>
              <FolderName>WorkingWithData</FolderName>
              <Order>4</Order>
              <Folders>
                <Folder>
                  <Title>Data Handling Features</Title>
                  <Description>This Section includes following examples: 

1: Accessing Cells of a Worksheet
2: Adding Data to Cells
3: Retrieving Data from Cells
4: Find or Search Data
5: Data Sorting
6: Importing Data to Worksheets
7: Exporting Data from Worksheets
8: Tracing Precedents and Dependents
9: Accessing Maximum Display Range of Worksheet</Description>
                  <FolderName>DataHandlingFeatures</FolderName>
                  <Order>1</Order>
                  <Examples>
                    <Example>
                      <Title>Adding Data to Cells</Title>
                      <Description>Aspose.Cells allows developers to add data to the cells of their worksheets by calling the PutValue method of the Cell class. Aspose.Cells provides different overloaded versions of the PutValue method that facilitate users to add different kinds of data to the cells. Using these overloaded versions of PutValue method, developers can add a boolean, string, double, integer or date/time etc. value to the cell.</Description>
                      <FolderName>AddingDataToCells</FolderName>
                      <Order>2</Order>
                      <DocLink>
                        <DisplayName>Adding Data to Cells</DisplayName>
                        <Url>Adding+Data+to+Cells</Url>
                      </DocLink>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Retrieving Data from Cells</Title>
                      <Description>While working on worksheets, users may add different types of data in the cells. These data types may include Boolean, integer, floating point, text or date/time values. With Aspose.Cells, you can get the appropriate values from the cells according to their data types.</Description>
                      <FolderName>RetrievingDataFromCells</FolderName>
                      <Order>3</Order>
                      <DocLink>
                        <DisplayName>Retrieving Data from Cells</DisplayName>
                        <Url>Retrieving+Data+from+Cells</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <Type>Console</Type>
                    </Example>
                    <Example>
                      <Title>Data Sorting</Title>
                      <Description>Aspose.Cells provides DataSorter class used to sort data in Ascending or Descending order. The class has some important members i.e. Properties like Key1 .... Key3 and Order1 .... Order3 for .NET version of the component. These members are used to define sorted keys and specify the sort orders for the keys. You will have to define your desired keys and set orders before you implement data sorting. The class provides Sort method that is used to perform data sorting operation based on a worksheet's cells data. 

The Sort method accepts the following parameters:

1: Aspose.Cells.Cells denotes the cells for underlying worksheet.
2: Aspose.Cells.CellArea represents the cellarea range. you have to define your desired cellarea first before applying data sorting.</Description>
                      <FolderName>DataSorting</FolderName>
                      <Order>5</Order>
                      <DocLink>
                        <DisplayName>Data Sorting</DisplayName>
                        <Url>Data+Sorting</Url>
                      </DocLink>
                      <InputFiles>
                        <DataFile>
                          <Path>..\Data\book1.xls</Path>
                        </DataFile>
                      </InputFiles>
                      <OutputFiles>
                        <DataFile>
                          <Path>..\Data\output.xls</Path>
                        </DataFile>
                      </OutputFiles>
                      <Type>Console</Type>
                    </Example>
                  </Examples>
                  <Folders>
                    <Folder>
                      <Title>Accessing Cells of a Worksheet</Title>
                      <Description>A cell is a basic part of a worksheet that is used to construct the whole worksheet as a sequence of rows and columns. Before we try to access data from a worksheet, we would need to get access to its cells. So, in this section, we will see some basic approaches to access worksheet cells at runtime using Aspose.Cells.

1: Using Cell Name
2: Using Row &amp; Column Index of the Cell
3: Using Cell Index in Cells Collection</Description>
                      <FolderName>AccessingCellsofWorksheet</FolderName>
                      <Order>1</Order>
                      <Examples>
                        <Example>
                          <Title>Using Cell Name</Title>
                          <Description>Developers can access any specific cell by passing its cell name to the Cells collection of the Worksheet class as an index.</Description>
                          <FolderName>UsingCellName</FolderName>
                          <Order>1</Order>
                          <DocLink>
                            <DisplayName>Accessing Cells of a Worksheet</DisplayName>
                            <Url>Accessing+Cells+of+a+Worksheet</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Using Row and Column Index of the Cell</Title>
                          <Description>Developers can access any specific cell by passing the indices of its row and column to the Cells collection of the Worksheet class.</Description>
                          <FolderName>UsingRowAndColumnIndexOfCell</FolderName>
                          <Order>2</Order>
                          <DocLink>
                            <DisplayName>Accessing Cells of a Worksheet</DisplayName>
                            <Url>Accessing+Cells+of+a+Worksheet</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Using Cell Index in Cells Collection</Title>
                          <Description>A cell can also be accessed by passing the cell's numeric index to the Cells collection using Aspose.Cells.</Description>
                          <FolderName>UsingCellIndexInCellsCollection</FolderName>
                          <Order>3</Order>
                          <DocLink>
                            <DisplayName>Accessing Cells of a Worksheet</DisplayName>
                            <Url>Accessing+Cells+of+a+Worksheet</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <Type>Console</Type>
                        </Example>
                      </Examples>
                    </Folder>
                    <Folder>
                      <Title>Find or Search Data</Title>
                      <Description>Cells collection provides several methods to find cells in a worksheet containing user specified data. This section includes the following:

1: Finding Cells Containing a Formula
2: Finding Data / Formulas using FindOptions
3: Finding Cells Containing Specified String Value or Number</Description>
                      <FolderName>FindOrSearchData</FolderName>
                      <Order>4</Order>
                      <Examples>
                        <Example>
                          <Title>Finding Cells Containing a Formula</Title>
                          <Description>Developers can find a specified formula in the worksheet by calling FindFormula method of Cells collection. Typically, FindFormula method accepts two parameters:

1: Formula to Search, represents a formula that is needed to find in the worksheet
2: Previous Cell, represents the previous cell with the same formula. This parameter can be set to null if you are searching from the start</Description>
                          <FolderName>FindingCellsContainingFormula</FolderName>
                          <Order>1</Order>
                          <DocLink>
                            <DisplayName>Find or Search Data</DisplayName>
                            <Url>Find+or+Search+Data</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Finding Data or Formulas using FindOptions</Title>
                          <Description>Developers can also find specified data values in the worksheet by calling Find method of Cells collection with various FindOptions. Typically, Find method accepts two parameters:

1: Value to be Searched, represents the data/value to be searched that is needed to find in the worksheet cells.
2: Previous Cell, represents the previous cell with the same value. This parameter can be set to null/nothing if you are searching from the start.
3: Find Options, represents the find options.</Description>
                          <FolderName>FindingDataOrFormulasUsingFindOptions</FolderName>
                          <Order>2</Order>
                          <DocLink>
                            <DisplayName>Find or Search Data</DisplayName>
                            <Url>Find+or+Search+Data</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <Type>Console</Type>
                        </Example>
                        <Example>
                          <Title>Finding Cells Containing Specified String Value or Number</Title>
                          <Description>Developers can also find specified string values in the worksheet by calling the same Find method of Cells collection with various FindOptions.You will have to specify the FindOptions.LookInType and FindOptions.LookAtType properties.</Description>
                          <FolderName>FindingCellsContainingStringValueOrNumber</FolderName>
                          <Order>3</Order>
                          <DocLink>
                            <DisplayName>Find or Search Data</DisplayName>
                            <Url>Find+or+Search+Data</Url>
                          </DocLink>
                          <InputFiles>
                            <DataFile>
                              <Path>..\Data\book1.xls</Path>
                            </DataFile>
                          </InputFiles>
                          <Type>Console</Type>
                        </Example>
                      </Examples>
                    </Folder>
                  </Folders>
                </Folder>
              </Folders>
            </Folder>
          </Folders>
        </Folder>
      </Folders>
    </Folder>
  </Folders>
</Data>